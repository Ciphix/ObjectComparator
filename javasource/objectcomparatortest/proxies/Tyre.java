// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package objectcomparatortest.proxies;

public class Tyre
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject tyreMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "ObjectComparatorTest.Tyre";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Brand("Brand"),
		Model("Model"),
		Size("Size"),
		Car_Tyre("ObjectComparatorTest.Car_Tyre"),
		Tyre_Location("ObjectComparatorTest.Tyre_Location");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Tyre(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected Tyre(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject tyreMendixObject)
	{
		if (tyreMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, tyreMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.tyreMendixObject = tyreMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Tyre.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static objectcomparatortest.proxies.Tyre initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return objectcomparatortest.proxies.Tyre.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static objectcomparatortest.proxies.Tyre initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new objectcomparatortest.proxies.Tyre(context, mendixObject);
	}

	public static objectcomparatortest.proxies.Tyre load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return objectcomparatortest.proxies.Tyre.initialize(context, mendixObject);
	}

	public static java.util.List<objectcomparatortest.proxies.Tyre> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		return com.mendix.core.Core.createXPathQuery(String.format("//%1$s%2$s", entityName, xpathConstraint))
			.execute(context)
			.stream()
			.map(obj -> objectcomparatortest.proxies.Tyre.initialize(context, obj))
			.collect(java.util.stream.Collectors.toList());
	}

	/**
	 * Commit the changes made on this proxy object.
	 * @throws com.mendix.core.CoreException
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 * @throws com.mendix.core.CoreException
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Brand
	 */
	public final java.lang.String getBrand()
	{
		return getBrand(getContext());
	}

	/**
	 * @param context
	 * @return value of Brand
	 */
	public final java.lang.String getBrand(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Brand.toString());
	}

	/**
	 * Set value of Brand
	 * @param brand
	 */
	public final void setBrand(java.lang.String brand)
	{
		setBrand(getContext(), brand);
	}

	/**
	 * Set value of Brand
	 * @param context
	 * @param brand
	 */
	public final void setBrand(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String brand)
	{
		getMendixObject().setValue(context, MemberNames.Brand.toString(), brand);
	}

	/**
	 * @return value of Model
	 */
	public final java.lang.String getModel()
	{
		return getModel(getContext());
	}

	/**
	 * @param context
	 * @return value of Model
	 */
	public final java.lang.String getModel(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Model.toString());
	}

	/**
	 * Set value of Model
	 * @param model
	 */
	public final void setModel(java.lang.String model)
	{
		setModel(getContext(), model);
	}

	/**
	 * Set value of Model
	 * @param context
	 * @param model
	 */
	public final void setModel(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String model)
	{
		getMendixObject().setValue(context, MemberNames.Model.toString(), model);
	}

	/**
	 * @return value of Size
	 */
	public final java.lang.Integer getSize()
	{
		return getSize(getContext());
	}

	/**
	 * @param context
	 * @return value of Size
	 */
	public final java.lang.Integer getSize(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.Size.toString());
	}

	/**
	 * Set value of Size
	 * @param size
	 */
	public final void setSize(java.lang.Integer size)
	{
		setSize(getContext(), size);
	}

	/**
	 * Set value of Size
	 * @param context
	 * @param size
	 */
	public final void setSize(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer size)
	{
		getMendixObject().setValue(context, MemberNames.Size.toString(), size);
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of Car_Tyre
	 */
	public final objectcomparatortest.proxies.Car getCar_Tyre() throws com.mendix.core.CoreException
	{
		return getCar_Tyre(getContext());
	}

	/**
	 * @param context
	 * @return value of Car_Tyre
	 * @throws com.mendix.core.CoreException
	 */
	public final objectcomparatortest.proxies.Car getCar_Tyre(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		objectcomparatortest.proxies.Car result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Car_Tyre.toString());
		if (identifier != null) {
			result = objectcomparatortest.proxies.Car.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of Car_Tyre
	 * @param car_tyre
	 */
	public final void setCar_Tyre(objectcomparatortest.proxies.Car car_tyre)
	{
		setCar_Tyre(getContext(), car_tyre);
	}

	/**
	 * Set value of Car_Tyre
	 * @param context
	 * @param car_tyre
	 */
	public final void setCar_Tyre(com.mendix.systemwideinterfaces.core.IContext context, objectcomparatortest.proxies.Car car_tyre)
	{
		if (car_tyre == null) {
			getMendixObject().setValue(context, MemberNames.Car_Tyre.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.Car_Tyre.toString(), car_tyre.getMendixObject().getId());
		}
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of Tyre_Location
	 */
	public final objectcomparatortest.proxies.Location getTyre_Location() throws com.mendix.core.CoreException
	{
		return getTyre_Location(getContext());
	}

	/**
	 * @param context
	 * @return value of Tyre_Location
	 * @throws com.mendix.core.CoreException
	 */
	public final objectcomparatortest.proxies.Location getTyre_Location(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		objectcomparatortest.proxies.Location result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Tyre_Location.toString());
		if (identifier != null) {
			result = objectcomparatortest.proxies.Location.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of Tyre_Location
	 * @param tyre_location
	 */
	public final void setTyre_Location(objectcomparatortest.proxies.Location tyre_location)
	{
		setTyre_Location(getContext(), tyre_location);
	}

	/**
	 * Set value of Tyre_Location
	 * @param context
	 * @param tyre_location
	 */
	public final void setTyre_Location(com.mendix.systemwideinterfaces.core.IContext context, objectcomparatortest.proxies.Location tyre_location)
	{
		if (tyre_location == null) {
			getMendixObject().setValue(context, MemberNames.Tyre_Location.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.Tyre_Location.toString(), tyre_location.getMendixObject().getId());
		}
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return tyreMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final objectcomparatortest.proxies.Tyre that = (objectcomparatortest.proxies.Tyre) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return entityName;
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
